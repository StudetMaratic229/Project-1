from sentence_transformers import SentenceTransformer, util
import telebot
import os

from dotenv import load_dotenv
load_dotenv()

bot = telebot.TeleBot(str(os.getenv("TOKEN")))
model = SentenceTransformer('all-MiniLM-L6-v2')
questions = ['–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä?', '–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?',
             '–ö–∞–∫ —è –º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ - –ª–∏–±–æ —É –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?', '–ö–∞–∫ —è –º–æ–≥—É –∫—É–ø–∏—Ç—å —á—Ç–æ - –ª–∏–±–æ –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ?',
             '–ö–∞–∫ —è –º–æ–≥—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —á—Ç–æ - –ª–∏–±–æ –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ?', '–ö–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä?']

questions1 = {
    '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?': 1,
    '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä?': 2,
    '–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?': 3,
    '–ö–∞–∫ —è –º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ - –ª–∏–±–æ —É –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?': 2,
    '–ö–∞–∫ —è –º–æ–≥—É –∫—É–ø–∏—Ç—å —á—Ç–æ - –ª–∏–±–æ –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ?': 3,
    '–ö–∞–∫ —è –º–æ–≥—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —á—Ç–æ - –ª–∏–±–æ –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ?': 3,
    '–ö–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä?': 3
}
answers = {
    1: '–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:',
    2: '–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:',
    3: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:'
}

e = model.encode(questions)


@bot.message_handler(commands=["start"])
def start(message):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    button = telebot.types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='vopros')
    keyboard.add(button)
    bot.send_message(message.chat.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:",
                     reply_markup=keyboard)


@bot.message_handler(commands=["spisok"])
def admin(message):
    if message.from_user.id == int(os.getenv("ID")):
        try:
            file_path = 'file.txt'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            with open(file_path, 'r') as file:
                file_content = file.read()
            bot.send_message(int(os.getenv("ID")), file_content, parse_mode="HTML")
        except Exception as e:
            bot.send_message(int(os.getenv("ID")), "–§–∞–π–ª –ø—É—Å—Ç! :(")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")


@bot.message_handler(commands=["clear"])
def adm(message):
    if message.from_user.id == int(os.getenv("ID")):
        file_to_delete2 = open("file.txt", 'w')
        file_to_delete2.close()
        bot.send_message(int(os.getenv("ID")), "–í—Å—ë –≥–æ—Ç–æ–≤–æ!")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")


def giveanswers(message):
    global questions, answers, e
    my_qs = message.text
    filePath1 = 'file.txt'
    file = open(filePath1, 'a')
    file.write("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @" + str(message.from_user.username) + " –í–æ–ø—Ä–æ—Å: " + my_qs + "\n\n")
    file.close()
    e2 = model.encode(my_qs)
    cos = util.cos_sim(e, e2)
    sq = []
    for i in range(0, len(cos)):
        sq.append([i, cos[i]])

    sq = sorted(sq, key=lambda x: x[1], reverse=True)

    if sq[0][1] <= 0.72:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        button = telebot.types.InlineKeyboardButton('–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', url="https://web.telegram.org/k/#@Astro8989")
        button1 = telebot.types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='glav')
        keyboard.add(button, button1)
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å :(\n–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –Ω–∞ "
                                          "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=keyboard)
    else:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        button = telebot.types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ',
                                                    url="https://sbert.net/docs/usage/semantic_textual_similarity.html")
        button1 = telebot.types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='glav')
        keyboard.add(button, button1)
        me = questions[sq[0][0]]
        bot.send_message(message.chat.id, f"{answers[questions1[me]]}", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def queue(call):
    if call.data == "vopros":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–°–ø–∞—Å–∏–±–æ!üòä",
                              reply_markup=None)
        s = bot.send_message(call.message.chat.id, "–ù–∞–Ω–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ:")
        bot.register_next_step_handler(s, giveanswers)
    if call.data == "glav":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–°–ø–∞—Å–∏–±–æ!üòä",
                              reply_markup=None)
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        button = telebot.types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='vopros')
        keyboard.add(button)
        bot.send_message(call.message.chat.id,
                         "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:",
                         reply_markup=keyboard)


bot.polling()
